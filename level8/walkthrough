level8@RainFall:~$ gdb ./level8
Dump of assembler code for function main:
   0x08048564 <+0>:	push   %ebp
   0x08048565 <+1>:	mov    %esp,%ebp
   0x08048567 <+3>:	push   %edi
   0x08048568 <+4>:	push   %esi
   0x08048569 <+5>:	and    $0xfffffff0,%esp
   0x0804856c <+8>:	sub    $0xa0,%esp											stack alignment.
   0x08048572 <+14>:	jmp    0x8048575 <main+17>								weird...
   0x08048574 <+16>:	nop
   0x08048575 <+17>:	mov    0x8049ab0,%ecx									mov service in ecx
   0x0804857b <+23>:	mov    0x8049aac,%edx									mov auth in edx
   0x08048581 <+29>:	mov    $0x8048810,%eax									mov _fp_hw address + 2 in eax (a format string is stored there)
   0x08048586 <+34>:	mov    %ecx,0x8(%esp)									mov service (ecx) on the stack			|\
   0x0804858a <+38>:	mov    %edx,0x4(%esp)									mov auth (edx) on the stack				| -> printf params
   0x0804858e <+42>:	mov    %eax,(%esp)										mov _fp_hw (eax) on the stack			|/
   0x08048591 <+45>:	call   0x8048410 <printf@plt>
   0x08048596 <+50>:	mov    0x8049a80,%eax									mov stdin in eax						|\
   0x0804859b <+55>:	mov    %eax,0x8(%esp)									mov stdin (eax) on the stack			| \
   0x0804859f <+59>:	movl   $0x80,0x4(%esp)									mov 128 ($0x80) on the stack			|  -> fgets params
   0x080485a7 <+67>:	lea    0x20(%esp),%eax									mov buffer address in eax				| /
   0x080485ab <+71>:	mov    %eax,(%esp)										mov buffer address (eax) on the stack	|/
   0x080485ae <+74>:	call   0x8048440 <fgets@plt>
   0x080485b3 <+79>:	test   %eax,%eax										if eax == 0
   0x080485b5 <+81>:	je     0x804872c <main+456>
   0x080485bb <+87>:	lea    0x20(%esp),%eax									loads the address of the 128 bytes stack buffer in eax
   0x080485bf <+91>:	mov    %eax,%edx										mov this address (eax) in edx
   0x080485c1 <+93>:	mov    $0x8048819,%eax									mov the address of "auth " string in eax
   0x080485c6 <+98>:	mov    $0x5,%ecx										mov 5 (0x5) in ecx
   0x080485cb <+103>:	mov    %edx,%esi										mov the address of the 128 bytes stack buffer (edx) in esi
   0x080485cd <+105>:	mov    %eax,%edi										mov the address of "auth " (eax) in edi
   0x080485cf <+107>:	repz cmpsb %es:(%edi),%ds:(%esi)						cmp "auth " with the 128 bytes stack buffer
   0x080485d1 <+109>:	seta   %dl												set both dl and al to 0 if the strings are similar,
   0x080485d4 <+112>:	setb   %al												al to 1 if edi[i] > esi[i], dl to 1 if edi[i] < esi[i].
   0x080485d7 <+115>:	mov    %edx,%ecx										mov buffer address (edx) to ecx.
   0x080485d9 <+117>:	sub    %al,%cl											sub cl to al
   0x080485db <+119>:	mov    %ecx,%eax										mov buffer address (ecx) to eax
   0x080485dd <+121>:	movsbl %al,%eax											mov al value casted to int in eax
   0x080485e0 <+124>:	test   %eax,%eax										if eax != 0
   0x080485e2 <+126>:	jne    0x8048642 <main+222>
   0x080485e4 <+128>:	movl   $0x4,(%esp)										mov 4 (0x4) on the stack
   0x080485eb <+135>:	call   0x8048470 <malloc@plt>
   0x080485f0 <+140>:	mov    %eax,0x8049aac									mov malloc return value in the address that previously contained "auth "
   0x080485f5 <+145>:	mov    0x8049aac,%eax									mov this malloc'ed address in eax
   0x080485fa <+150>:	movl   $0x0,(%eax)										mov (int)0 in the malloc'ed zone
   0x08048600 <+156>:	lea    0x20(%esp),%eax									loads buffer memory address in eax
   0x08048604 <+160>:	add    $0x5,%eax										add 5 ($0x5) to eax
   0x08048607 <+163>:	movl   $0xffffffff,0x1c(%esp)							mov unsigned int max on the stack
   0x0804860f <+171>:	mov    %eax,%edx										mov buffer address + 5 in edx
   0x08048611 <+173>:	mov    $0x0,%eax										mov 0 in eax
   0x08048616 <+178>:	mov    0x1c(%esp),%ecx									mov unsigned int max (0xffffffff) in ecx
   0x0804861a <+182>:	mov    %edx,%edi										mov buffer address + 5 in edi
   0x0804861c <+184>:	repnz scas %es:(%edi),%al								iterates in buffer until a \0, while decrementing ecx for each byte.
   0x0804861e <+186>:	mov    %ecx,%eax										mov ecx (0xffffffff - length of (buffer + 5) string)
   0x08048620 <+188>:	not    %eax												inverses every bit value in eax
   0x08048622 <+190>:	sub    $0x1,%eax										substract 1 ($0x1) to eax
   0x08048625 <+193>:	cmp    $0x1e,%eax										if eax > 30 ($0x1e)
   0x08048628 <+196>:	ja     0x8048642 <main+222>
   0x0804862a <+198>:	lea    0x20(%esp),%eax									load address of buffer in eax
   0x0804862e <+202>:	lea    0x5(%eax),%edx									load address of buffer + 5 in edx
   0x08048631 <+205>:	mov    0x8049aac,%eax									mov the address of auth variable eax
   0x08048636 <+210>:	mov    %edx,0x4(%esp)									mov the address of buffer + 5 on stack
   0x0804863a <+214>:	mov    %eax,(%esp)										mov auth variable on stack
   0x0804863d <+217>:	call   0x8048460 <strcpy@plt>
   0x08048642 <+222>:	lea    0x20(%esp),%eax									load address of buffer in eax
   0x08048646 <+226>:	mov    %eax,%edx										mov this address in edx
   0x08048648 <+228>:	mov    $0x804881f,%eax									mov the address of "reset" in eax
   0x0804864d <+233>:	mov    $0x5,%ecx										mov 5 (0x5) in ecx
   0x08048652 <+238>:	mov    %edx,%esi										mov buffer address in esi
   0x08048654 <+240>:	mov    %eax,%edi										mov "reset" address in edi
   0x08048656 <+242>:	repz cmpsb %es:(%edi),%ds:(%esi)						cmp "reset" with the 128 bytes stack buffer
   0x08048658 <+244>:	seta   %dl
   0x0804865b <+247>:	setb   %al
   0x0804865e <+250>:	mov    %edx,%ecx										mov buffer address (edx) in ecx
   0x08048660 <+252>:	sub    %al,%cl											sub cl to al
   0x08048662 <+254>:	mov    %ecx,%eax										mov buffer address (ecx) in eax
   0x08048664 <+256>:	movsbl %al,%eax											mov al value casted to int in eax
   0x08048667 <+259>:	test   %eax,%eax										if eax != 0
   0x08048669 <+261>:	jne    0x8048678 <main+276>
   0x0804866b <+263>:	mov    0x8049aac,%eax									mov auth value in eax
   0x08048670 <+268>:	mov    %eax,(%esp)										mov auth value on the stack
   0x08048673 <+271>:	call   0x8048420 <free@plt>
   0x08048678 <+276>:	lea    0x20(%esp),%eax									load buffer address in eax
   0x0804867c <+280>:	mov    %eax,%edx										mov buffer address (eax) in edx
   0x0804867e <+282>:	mov    $0x8048825,%eax									mov "service" address in eax
   0x08048683 <+287>:	mov    $0x6,%ecx										mov 6 (0x6) in ecx
   0x08048688 <+292>:	mov    %edx,%esi										mov buffer address in esi
   0x0804868a <+294>:	mov    %eax,%edi										mov "service" address in edi
   0x0804868c <+296>:	repz cmpsb %es:(%edi),%ds:(%esi)						cmp buffer and "service"
   0x0804868e <+298>:	seta   %dl
   0x08048691 <+301>:	setb   %al
   0x08048694 <+304>:	mov    %edx,%ecx										mov buffer address in ecx
   0x08048696 <+306>:	sub    %al,%cl											sub cl to al
   0x08048698 <+308>:	mov    %ecx,%eax										mov buffer address in eax
   0x0804869a <+310>:	movsbl %al,%eax											mov al casted to int in eax
   0x0804869d <+313>:	test   %eax,%eax										if eax != 0
   0x0804869f <+315>:	jne    0x80486b5 <main+337>
   0x080486a1 <+317>:	lea    0x20(%esp),%eax									load buffer address in eax
   0x080486a5 <+321>:	add    $0x7,%eax										add 7 to eax
   0x080486a8 <+324>:	mov    %eax,(%esp)										mov eax on the stack
   0x080486ab <+327>:	call   0x8048430 <strdup@plt>
   0x080486b0 <+332>:	mov    %eax,0x8049ab0									mov strdup return value in service
   0x080486b5 <+337>:	lea    0x20(%esp),%eax									load buffer address in eax
   0x080486b9 <+341>:	mov    %eax,%edx										load buffer address in edx
   0x080486bb <+343>:	mov    $0x804882d,%eax									mov "login" address in eax
   0x080486c0 <+348>:	mov    $0x5,%ecx										mov 5 in ecx
   0x080486c5 <+353>:	mov    %edx,%esi										mov buffer address in esi
   0x080486c7 <+355>:	mov    %eax,%edi										mov "login" address in edi
   0x080486c9 <+357>:	repz cmpsb %es:(%edi),%ds:(%esi)						compare strings until finding a difference
   0x080486cb <+359>:	seta   %dl
   0x080486ce <+362>:	setb   %al
   0x080486d1 <+365>:	mov    %edx,%ecx										mov buffer address in ecx
   0x080486d3 <+367>:	sub    %al,%cl											sub cl to al
   0x080486d5 <+369>:	mov    %ecx,%eax										mov buffer address to eax
   0x080486d7 <+371>:	movsbl %al,%eax											mov al casted to int in eax
   0x080486da <+374>:	test   %eax,%eax										if eax != 0
   0x080486dc <+376>:	jne    0x8048574 <main+16>
   0x080486e2 <+382>:	mov    0x8049aac,%eax									mov auth value in eax
   0x080486e7 <+387>:	mov    0x20(%eax),%eax									mov eax + 20 dans eax
   0x080486ea <+390>:	test   %eax,%eax										if eax == 0
   0x080486ec <+392>:	je     0x80486ff <main+411>
   0x080486ee <+394>:	movl   $0x8048833,(%esp)								mov "/bin/sh" on the stack
   0x080486f5 <+401>:	call   0x8048480 <system@plt>
   0x080486fa <+406>:	jmp    0x8048574 <main+16>
   0x080486ff <+411>:	mov    0x8049aa0,%eax									mov stdout in eax
   0x08048704 <+416>:	mov    %eax,%edx										mov stdout in edx
   0x08048706 <+418>:	mov    $0x804883b,%eax									mov "Password:" address in eax
   0x0804870b <+423>:	mov    %edx,0xc(%esp)									mov stdout on the stack
   0x0804870f <+427>:	movl   $0xa,0x8(%esp)									mov 10 on the stack
   0x08048717 <+435>:	movl   $0x1,0x4(%esp)									mov 1 on the stack
   0x0804871f <+443>:	mov    %eax,(%esp)										mov "Password:" address on the stack
   0x08048722 <+446>:	call   0x8048450 <fwrite@plt>
   0x08048727 <+451>:	jmp    0x8048574 <main+16>
   0x0804872c <+456>:	nop
   0x0804872d <+457>:	mov    $0x0,%eax
   0x08048732 <+462>:	lea    -0x8(%ebp),%esp
   0x08048735 <+465>:	pop    %esi
   0x08048736 <+466>:	pop    %edi
   0x08048737 <+467>:	pop    %ebp
   0x08048738 <+468>:	ret
End of assembler dump.
